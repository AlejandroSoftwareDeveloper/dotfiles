#+STARTUP: content

* My configuracion de emacs
*** Configuraciones variadas
#+BEGIN_SRC emacs-lisp 
    ;;Mostrar linea horinzontal
    (when window-system
      (global-hl-line-mode))
  (setq ibuffer-saved-filter-groups
	(quote(("default"
		("dired" (mode . dired-mode))
		("org" (name . "^.*org$"))

		("web" (or (mode . web-mode) (mode . js2-mode)))
		("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		("mu4e" (name . "\*mu4e\*"))
		("programming" (or
				(mode . python-mode)
				(mode . lisp-mode)
				(mode . scheme-mode)
				(mode . c++-mode)))
		("emacs" (or
			  (name . "^\\*scratch\\*$")
			  (name . "^\\*Messages\\*$")))
		))))

 (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-expert t)
  (setq backup-directory-alist `(("." . ,(expand-file-name "~/.emacs.d/backupfiles/" )))) 

  ;;;Funcion de configuracion de C 
  (setq c-default-style "k&r"
	c-basic-offset 4
	tab-width 4
	indent-tabs-mode t)

   ;;ESTILOS
   ;;Transparencia
   (set-frame-parameter (selected-frame) 'alpha '(.95 .70))
   (add-to-list 'default-frame-alist '(alpha .95 .70))
   
(defun affe-orderless-regexp-compiler (input _type _ignorecase)
  (setq input (orderless-pattern-compiler input))
  (cons input (lambda (str) (orderless--highlight input str))))
(setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
#+END_SRC
*** Evil-mode
#+BEGIN_SRC emacs-lisp 
   (use-package evil
     :demand t
      :bind (("<escape>" . keyboard-escape-quit))
      :init
      (setq evil-search-module 'evil-search)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode 1))
    (use-package evil-collection
      :after evil
      :config
      (setq evil-want-integration t)
      (evil-collection-init))
  ;;Usar en caso de que no funcione: (setq evil-want-C-u-scroll t) 
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  ;;(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  ;;(define-key evil-insert-state-map (kbd "C-u")
    ;;(lambda ()
      ;;(interactive)
      ;;(evil-delete (point-at-bol) (point))))
#+END_SRC
*** Hydra
#+BEGIN_SRC emacs-lisp 
(use-package hydra)
(defhydra hydra-shortcuts (global-map "<f6>")
  "goto directory"
  ("e"  (find-file "~/.emacs") ".emacs") 
  ;;("e"  (find-file "~/.emacs.d/init.el") ".emacs") ;;Antes funcionaba bien con mi configuracion de init.el
  ("b"  (find-file "/media/dark/Work System/Literatura y Videotutoriales/Base de conocimiento/") "Base de conocimiento") 
  ("a"  (find-file "/media/dark/Alejandro/1 - PROYECTOS URGENTES/Proyecto D/Patrones de disenio/") "Proyectos de la memoria") 
  ("pc" (find-file "/media/dark/Work System/Proyectos de Programacion/En proceso (importantes)") "Proyectos en curso") 
  ("x"  (find-file "X:/") "Archivos de proyectos de C C++") 
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out")
  ("q" nil "Quit" :color blue))
#+END_SRC
*** Org-mode
#+BEGIN_SRC emacs-lisp 
(use-package org
  :config
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files '("D:\\Literatura\ y\ Videotutoriales\\Base\ de\ conocimiento\\Task.org"))
  (setq org-ellipsis " âŒ„"
	org-hide-emphasis-markers t))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))

#+END_SRC
*** Configuraciones de teclado
#+BEGIN_SRC emacs-lisp 
  (defun my-insert-tab()
      (interactive)
    (insert "\t"))
  (global-set-key (kbd "TAB") 'my-insert-tab)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-M-g") 'consult-ripgrep)
  (global-set-key (kbd "C-M-j") 'consult-buffer)
  (global-set-key (kbd "C-s") 'consult-line)
  (global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key [f9] 'evil-mode)

  (global-set-key (kbd "C-l") 'evil-window-right)
  (global-set-key (kbd "C-h") 'evil-window-left)
  (global-set-key (kbd "C-k") 'evil-window-up)
  (global-set-key (kbd "C-j") 'evil-window-down)

  ;;Window control --Control de ventanas de window--
  (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-S-<down>") 'shrink-window)
  (global-set-key (kbd "C-S-<up>") 'enlarge-window)
  (global-set-key (kbd "C-x C-a") 'eglot-format-buffer)
#+END_SRC
*** Eglot
#+BEGIN_SRC emacs-lisp 
  (use-package eglot)
  (add-to-list 'eglot-server-programs '(f90-mode . ("fortls" "--notify_init" "--nthreads=4")))
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  ;;lsp disactivados
  ;;go
  ;;(add-to-list 'eglot-server-programs '(go-mode . ("gopls")))
  ;;(add-hook 'go-mode-hook 'eglot-ensure)

  ;;rust
  ;;(add-to-list 'eglot-server-programs '( rust-mode . ("rust-analyzer" :initializationOptions (:check (:command "clippy")))))
  ;;(add-hook 'rust-mode-hook 'eglot-ensure)

  ;;Atajos de teclados para eglot
  ;;(define-key eglot-mode-map (kbd "C-c <tab>") #'company-complete) ;initiate the completion manually
  ;;(define-key eglot-mode-map (kbd "C-c e f n") #'flymake-goto-next-error)
  ;;(define-key eglot-mode-map (kbd "C-c e f p") #'flymake-goto-prev-error)
  ;;(define-key eglot-mode-map (kbd "C-c e r") #'eglot-rename)
  ;;(define-key eglot-mode-map (kbd "C-c C-a") #'eglot-format-buffer)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :defer 0
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp 
  (use-package yasnippet-snippets
    :defer 0)
  (yas-global-mode 1)
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp flycheck
  (use-package flycheck 
   :defer 0
   :ensure t
   :init (global-flycheck-mode))
#+END_SRC
*** Which-key
#+BEGIN_SRC emacs-lisp Which-key
(use-package which-key
  :defer 0 
  :diminish (which-key-mode)
  :config
  (which-key-mode)   
  (setq which-key-idle-delay 2))
#+END_SRC
*** Vertico
#+BEGIN_SRC emacs-lisp Which-key
;;;;Buscador del sistema
(use-package vertico
  :ensure t
  :bind (:map vertico-map
	  ("C-j" . vertico-next)
	  ("C-l" . vertico-previous)
	  ;;("C-l" . vertico-exit) antes lo usaba ahora uso C-g 
	:map minibuffer-local-map
	  ("M-h" . backward-kill-word))
  :custom 
  (vertico-cycle t)
  :init
  (vertico-mode))
#+END_SRC
*** Orderless
#+BEGIN_SRC emacs-lisp Orderless
(use-package orderless
 :ensure t
 :custom
 (completion-styles '(orderless)))
#+END_SRC
*** Conpany mode
#+BEGIN_SRC emacs-lisp 
    (use-package company
	:ensure t)
    (add-hook 'after-init-hook 'global-company-mode)
    (setq eldoc-echo-area-use-multiline-p nil)
#+END_SRC
*** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
   ;;Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind
    (("M-A" . marginalia-cycle)
    :map minibuffer-local-map
    ("M-A" . marginalia-cycle))
    ;;The :init configuration is always executed (Not lazy!)
   :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
   (marginalia-mode))
#+END_SRC
*** Affe
#+BEGIN_SRC emacs-lisp
  ;;Buscador fuzzy finder
  (use-package affe
    :ensure t
    :config
    ;; Manual preview key for `affe-grep'
    (consult-customize affe-grep :preview-key (kbd "C-M-.")))
#+END_SRC
*** Consult
#+BEGIN_SRC emacs-lisp
	(use-package consult)
#+END_SRC
*** Counsel
#+BEGIN_SRC emacs-lisp 
    (use-package counsel)
#+END_SRC
*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp Rainbow-delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** C3 programming language
#+BEGIN_SRC emacs-lisp c3
  ;;(setq treesit-language-source-alist
  ;;'((c3 "https://github.com/c3lang/tree-sitter-c3")))
  ;;
  ;; (add-to-list 'treesit-language-source-alist
  ;; '(c3 "https://github.com/c3lang/tree-sitter-c3"))

  ;; (add-to-list 'load-path "~/.emacs.d/tree-sitter/libtree-sitter-c3.so")
  ;; (require 'c3-ts-mode)
#+END_SRC

*** Slime (Common Lisp)
#+BEGIN_SRC emacs-lisp slime_config
  (setq inferior-lisp-program "sbcl")
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
		
